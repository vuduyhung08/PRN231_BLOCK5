
@model IEnumerable<Front_end.Controllers.EvaluationDTO>
<link rel="stylesheet" href="~/css/register.css" />

<h2>Evaluations</h2>

<div class="d-flex justify-content-end">
    <a href="@Url.Action("Create")" class="btn btn-primary">Add New Evaluation</a>
    <a id="send-grade" class="btn btn-primary ms-5">Send grade to student</a>
</div>
<table class="table mt-4">
    <thead>
        <tr>
            <th>Student id</th>
            <th>Student name</th>
            <th>Grade</th>
            <th>Explanation</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>@item.StudentId</td>
                <td>@item.StudentName</td>
                <td>@item.Grade</td>
                <td>@item.AdditionExplanation</td>
                <td>
                    <a href="@Url.Action("Edit", new { id = item.EvaluationId })">Edit</a> |
                    <a href="javascript:void(0);" onclick="confirmDelete(@item.EvaluationId)">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>

<div class="overlay" id="loading-overlay">
    <div class="spinner"></div>
</div>
<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script>
    function confirmDelete(evaluationId) {
        if (confirm("Are you sure you want to delete this evaluation?")) {
            $("#loading-overlay").css('display', 'flex');

            $.ajax({
                url: `http://localhost:5224/api/Evaluations/${evaluationId}`,
                type: 'DELETE',
                success: function (response) {
                    $("#loading-overlay").hide();
                    window.location.reload();
                },
                error: function (xhr, status, error) {
                    let errorMessage = 'An error occurred.';

                    try {
                        const responseJson = JSON.parse(xhr.responseText);
                        if (responseJson.errors) {
                            let formattedErrors = `Error Code: ${responseJson.status}\n`;
                            for (const [key, messages] of Object.entries(responseJson.errors)) {
                                formattedErrors += `${key}: \n${messages.join('\n')} \n`;
                            }
                            errorMessage = formattedErrors.trim();
                        } else if (responseJson.title) {
                            errorMessage = `${responseJson.title}: ${responseJson.detail || 'No details provided'}`;
                        } else {
                            errorMessage = `Error: ${xhr.responseText}`;
                        }
                    } catch (e) {
                        errorMessage = `Error: ${xhr.responseText}`;
                    }

                    $("#loading-overlay").hide();
                    alert(errorMessage);
                }
            });
        }
    }
</script>
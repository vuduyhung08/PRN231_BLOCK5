
<style>
    h2 {
        color: #333;
        text-align: center;
        margin-bottom: 20px;
    }

    table {
        width: 100%;
        max-width: 600px;
        margin: 0 auto;
        border-collapse: collapse;
        background-color: #fff;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    th, td {
        padding: 12px;
        text-align: left;
        border: 1px solid #ddd;
    }

    th {
        background-color: #f2f2f2;
        width: 30%;
    }

    td input[type="text"],
    td input[type="number"],
    td select {
        width: 100%;
        padding: 8px;
        box-sizing: border-box;
        border: 1px solid #ddd;
        border-radius: 4px;
    }

        td input[readonly],
        td select[disabled] {
            background-color: #e9ecef;
            cursor: not-allowed;
        }

    button {
        padding: 10px 15px;
        margin-top: 10px;
        border: none;
        background-color: #007bff;
        color: #fff;
        cursor: pointer;
        border-radius: 4px;
        transition: background-color 0.3s;
        width: 100%;
    }

        button:hover {
            background-color: #0056b3;
        }

    .actions {
        display: flex;
        justify-content: space-between;
    }

        .actions button {
            width: 48%;
        }

    .score-table {
        margin-top: 20px;
        display: none;
    }

        .score-table th,
        .score-table td {
            text-align: center;
        }
</style>

<h2 style="margin-top: 100px">Student Profile</h2>
<table>
    <tbody id="tb">
        <tr>
            <th>Student ID</th>
            <td><input type="text" id="studentId" readonly></td>
        </tr>
        <tr>
            <th>Name</th>
            <td><input type="text" id="name"></td>
        </tr>
        <tr>
            <th>Age</th>
            <td><input type="number" id="age"></td>
        </tr>
        <tr>
            <th>Regular Student</th>
            <td>
                <select id="isRegularStudent" disabled>
                    <option value="true">Yes</option>
                    <option value="false">No</option>
                </select>
            </td>
        </tr>
        <tr>
            <th>Address</th>
            <td><input type="text" id="address"></td>
        </tr>
        <tr>
            <th>Additional Information</th>
            <td><input type="text" id="additionalInformation"></td>
        </tr>
        <tr>
            <th>Actions</th>
            <td colspan="2" class="actions">
                <button onclick="viewScore()">View Score</button>
                <button onclick="updateProfile()">Update Profile</button>
            </td>
        </tr>
    </tbody>
</table>

<!-- Bảng để hiển thị điểm số -->
<table class="score-table" id="scoreTable">
    <thead>
        <tr>
            <th>EvaluationId</th>
            <th>Score</th>
            <th>AdditionExplanation</th>
        </tr>
    </thead>
    <tbody id="scoreTableBody">
        <!-- Dữ liệu điểm số sẽ được nạp ở đây -->
    </tbody>
</table>
<script src="~/lib/jquery/dist/jquery.min.js"></script>

<script>
    function getCookie(name) {
        const cookieArr = document.cookie.split(";");

        for (let i = 0; i < cookieArr.length; i++) {
            let cookie = cookieArr[i].trim();
            if (cookie.startsWith(name + "=")) {
                return cookie.substring(name.length + 1);
            }
        }

        return null;
    }

    function parseJwt(token) {
        let base64Url = token.split('.')[1];

        let base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');

        let jsonPayload = decodeURIComponent(atob(base64).split('').map(function (c) {
            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
        }).join(''));

        return JSON.parse(jsonPayload);
    }


    $(document).ready(() => {
        const jwtToken = getCookie("JwtToken");
        if (jwtToken) {
            const decodedToken = parseJwt(jwtToken);
            const userId = decodedToken.Id;
            GetStudentProfile(userId);
        }
        else 
        {
            window.location.href = 'http://localhost:5050/NotFound';
        }
    });

    const GetStudentProfile = (userId) => {
        $.ajax({
            url: `http://localhost:5224/api/Students/${userId}`,
            type: "GET",
            headers: {
                "Content-Type": "application/json",
            },
            success: (data) => {
                console.log(data);
                loadTableData(data);
            },
            error: () => {
                alert('Error loading student data');
            }
        });
    };

    const loadTableData = (element) => {
        $("#studentId").val(element.studentId);
        $("#name").val(element.name);
        $("#age").val(element.age);
        $("#isRegularStudent").val(element.isRegularStudent.toString());
        $("#address").val(element.studentDetails[0].address);
        $("#additionalInformation").val(element.studentDetails[0].additionalInformation);
    };

    const viewScore = () => {
        const studentId = $("#studentId").val();
        if (!studentId) {
            alert("Student ID is missing.");
            return;
        }

        $.ajax({
            url: `http://localhost:5224/api/Students/${studentId}/scores`,
            type: "GET",
            headers: {
                "Content-Type": "application/json",
            },
            success: (data) => {
                console.log('Scores:', data);
                loadScoreTable(data);
            },
            error: () => {
                alert('Error loading scores');
            }
        });
    };


    const loadScoreTable = (scores) => {
        if (!Array.isArray(scores)) {
            alert("Invalid score data.");
            return;
        }
        $("#scoreTableBody").empty();
        scores.forEach(score => {
            const row = `
                <tr>
                    <td>${score.evaluationId}</td>
                    <td>${score.grade}</td>
                    <td>${score.additionExplanation}</td>
                </tr>`;
            $("#scoreTableBody").append(row);
        });
        $("#scoreTable").show(); // Hiển thị bảng điểm
    };


    const updateProfile = () => {
        const studentId = $("#studentId").val();
        const updatedData = {
            studentId: studentId,
            name: $("#name").val(),
            age: $("#age").val(),
            isRegularStudent: $("#isRegularStudent").val() === "true",
            studentDetails: [{
                address: $("#address").val(),
                additionalInformation: $("#additionalInformation").val()
            }]
        };

        $.ajax({
            url: `http://localhost:5224/api/Students/${studentId}`,
            type: "PUT",
            headers: {
                "Content-Type": "application/json",
            },
            data: JSON.stringify(updatedData),
            success: () => {
                alert('Profile updated successfully');
            },
            error: (xhr) => {
                if (xhr.status === 400) {
                    alert('Error: ' + xhr.responseText);
                } else if (xhr.status === 404) {
                    alert('Student not found');
                } else {
                    alert('An error occurred while updating the profile');
                }
            }
        });
    };
</script>

